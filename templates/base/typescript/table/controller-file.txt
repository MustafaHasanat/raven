import {
    Body,
    Delete,
    Get,
    Param,
    Patch,
    Post,
    Query,
    Req,
    Res,
} from "@nestjs/common";
import { ApiOperation } from "@nestjs/swagger";
import { DeleteResult, FindManyOptions, UpdateResult } from "typeorm";
import { Request, Response } from "express";
import { TABLE_PLURAL_UPPER_NAMEService } from "./TABLE_PLURAL_LOWER_NAME.service";
import {
    EditorsWrapper,
    ControllerWrapper,
    GetAllByQuery,
} from "../../common/decorators";
import { CustomResponseType, DeleteQueryProps } from "../../common/types";
import { TABLE_UPPER_NAMEFields, TablesNames } from "../../common/enums/tables.enum";
import { RELATIONS_OBJECT } from "../../common/constants/relations";
import { DELETE_Pipe, GET_Pipe, POST_PATCH_Pipe } from "../../common/pipes";
import { TABLE_UPPER_NAME } from "../../entities/TABLE_LOWER_NAME.entity";
import { CreateTABLE_UPPER_NAMEDto } from "../../common/dto/TABLE_PLURAL_LOWER_NAME/create-TABLE_LOWER_NAME.dto";
import { UpdateTABLE_UPPER_NAMEDto } from "../../common/dto/TABLE_PLURAL_LOWER_NAME/update-TABLE_LOWER_NAME.dto";
import { DeletionQuery } from "src/common/decorators/delete.decorator";
import { getUserTokenData } from "src/common/helpers";

@ControllerWrapper("TABLE_PLURAL_LOWER_NAME")
export class TABLE_PLURAL_UPPER_NAMEController {
    constructor(private readonly TABLE_PLURAL_LOWER_NAMEService: TABLE_PLURAL_UPPER_NAMEService) {}

    // --- Basic CRUD endpoints ---

    @Get()
    @GetAllByQuery({
        fieldsEnum: TABLE_UPPER_NAMEFields,
        descendants: RELATIONS_OBJECT.TABLE_LOWER_NAME.descendants,
    })
    async getTABLE_PLURAL_UPPER_NAME(
        @Query(new GET_Pipe(TABLE_UPPER_NAMEFields, RELATIONS_OBJECT.TABLE_LOWER_NAME.ascendants))
        query: FindManyOptions,
        @Res() res: Response
    ) {
        const response: CustomResponseType<TABLE_UPPER_NAME[]> =
            await this.TABLE_PLURAL_LOWER_NAMEService.getTABLE_PLURAL_UPPER_NAME(query);
        return res.status(response.status).json(response);
    }

    @Get(":id")
    @ApiOperation({ summary: "get a single TABLE_LOWER_NAME using its ID" })
    async getTABLE_UPPER_NAMEById(@Param("id") id: string, @Res() res: Response) {
        const response: CustomResponseType<TABLE_UPPER_NAME> =
            await this.TABLE_PLURAL_LOWER_NAMEService.getTABLE_UPPER_NAMEById(id);

        return res.status(response.status).json(response);
    }

    @Post()
    @EditorsWrapper(CreateTABLE_UPPER_NAMEDto, "create a new TABLE_LOWER_NAME")
    async createTABLE_UPPER_NAME(
        @Body(new POST_PATCH_Pipe(TablesNames.TABLE_UPPER_SNAKE_CASE_NAME))
        createTABLE_UPPER_NAMEDto: CreateTABLE_UPPER_NAMEDto,
        @Res() res: Response
    ) {
        const response: CustomResponseType<TABLE_UPPER_NAME> =
            await this.TABLE_PLURAL_LOWER_NAMEService.createTABLE_UPPER_NAME(
                createTABLE_UPPER_NAMEDto,
            );

        return res.status(response.status).json(response);
    }

    @Patch(":id")
    @EditorsWrapper(UpdateTABLE_UPPER_NAMEDto, "update a TABLE_LOWER_NAME")
    async updateTABLE_UPPER_NAME(
        @Param("id") id: string,
        @Body(new POST_PATCH_Pipe(TablesNames.TABLE_UPPER_SNAKE_CASE_NAME))
        updateTABLE_UPPER_NAMEDto: UpdateTABLE_UPPER_NAMEDto,
        @Res() res: Response
    ) {
        const response: CustomResponseType<UpdateResult> =
            await this.TABLE_PLURAL_LOWER_NAMEService.updateTABLE_UPPER_NAME(id, updateTABLE_UPPER_NAMEDto);

        return res.status(response.status).json(response);
    }

    @Delete()
    @DeletionQuery("delete TABLE_PLURAL_LOWER_NAME")
    async deleteTABLE_UPPER_NAME(
        @Query(new DELETE_Pipe()) query: DeleteQueryProps,
        @Req() req: Request,
        @Res() res: Response
    ) {
        const response: CustomResponseType<DeleteResult> =
            await this.TABLE_PLURAL_LOWER_NAMEService.deleteTABLE_UPPER_NAME(query, getUserTokenData(req));

        return res.status(response.status).json(response);
    }
}
