import { Injectable } from "@nestjs/common";
import { InjectRepository } from "@nestjs/typeorm";
import {
    DeleteResult,
    FindManyOptions,
    Repository,
    UpdateResult,
} from "typeorm";
import {
    CustomResponseType,
    DeleteQueryProps,
    FullTokenPayload,
} from "../../common/types";
import { errorRes, newInstanceRes, updatedRes } from "../../common/responses";
import { CreateTABLE_UPPER_NAMEDto } from "../../common/dto/TABLE_PLURAL_LOWER_NAME/create-TABLE_LOWER_NAME.dto";
import { UpdateTABLE_UPPER_NAMEDto } from "../../common/dto/TABLE_PLURAL_LOWER_NAME/update-TABLE_LOWER_NAME.dto";
import {
    createHandler,
    deleteHandler,
    getAllHandler,
    getByIdHandler,
    updateHandler,
} from "../../common/helpers";
import { TABLE_UPPER_NAME } from "../../entities";

@Injectable()
export class TABLE_PLURAL_UPPER_NAMEService {
    constructor(
        // ----- external services -----
        // ----- base services -----
        @InjectRepository(TABLE_UPPER_NAME)
        private readonly TABLE_LOWER_NAMERepository: Repository<TABLE_UPPER_NAME>
    ) {}

    // --- Basic CRUD APIs ---

    async getTABLE_PLURAL_UPPER_NAME(
        query: FindManyOptions
    ): Promise<CustomResponseType<TABLE_UPPER_NAME[]>> {
        return await getAllHandler<TABLE_UPPER_NAME>({
            query,
            repository: this.TABLE_LOWER_NAMERepository,
            table: "TABLE_PLURAL_UPPER_NAME",
        });
    }

    async getTABLE_UPPER_NAMEById(id: string): Promise<CustomResponseType<TABLE_UPPER_NAME>> {
        return await getByIdHandler<TABLE_UPPER_NAME>({
            id,
            repository: this.TABLE_LOWER_NAMERepository,
            table: "TABLE_UPPER_NAME",
        });
    }

    async createTABLE_UPPER_NAME(
        createTABLE_UPPER_NAMEDto: CreateTABLE_UPPER_NAMEDto,
    ): Promise<CustomResponseType<TABLE_UPPER_NAME>> {
        try {
            const response = await createHandler<TABLE_UPPER_NAME>({
                dto: createTABLE_UPPER_NAMEDto,
                repository: this.TABLE_LOWER_NAMERepository,
            });

            return newInstanceRes<TABLE_UPPER_NAME>(
                "TABLE_UPPER_NAME has been created successfully",
                response
            );
        } catch (error) {
            return errorRes(error.message);
        }
    }

    async updateTABLE_UPPER_NAME(
        id: string,
        updateTABLE_UPPER_NAMEDto: UpdateTABLE_UPPER_NAMEDto
    ): Promise<CustomResponseType<UpdateResult>> {
        try {
            const response = await updateHandler<TABLE_UPPER_NAME>({
                id,
                dto: updateTABLE_UPPER_NAMEDto,
                table: "TABLE_UPPER_NAME",
                repository: this.TABLE_LOWER_NAMERepository,
            });

            return updatedRes<UpdateResult>(
                "TABLE_UPPER_NAME has been updated successfully",
                response
            );
        } catch (error) {
            return errorRes(error.message);
        }
    }

    async deleteTABLE_UPPER_NAME(
        query: DeleteQueryProps,
        userTokenData: FullTokenPayload
    ): Promise<CustomResponseType<DeleteResult>> {
        const { id, wipe } = query;

        return await deleteHandler<TABLE_UPPER_NAME>({
            id,
            wipe,
            repository: this.TABLE_LOWER_NAMERepository,
            table: "TABLE_UPPER_NAME",
            userTokenData,
        });
    }
}
